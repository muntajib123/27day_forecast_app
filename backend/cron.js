const cron = require("node-cron");
const { runLSTMModel } = require("./models/LSTMModelRunner");
const axios = require("axios");
const { MongoClient } = require("mongodb");

const mongoURL = "mongodb://localhost:27018/";
const dbName = "noaa_database";
const collectionName = "forecast_lstm_27day";

// NOAA API endpoint for the latest 27-day forecast block
const NOAA_API_URL = "https://services.swpc.noaa.gov/text/27-day-outlook.txt";

// Fetch NOAA's latest forecast block
async function getLatestNOAABlock() {
  try {
    const response = await axios.get(NOAA_API_URL);
    const data = response.data;

    if (!data || data.length === 0) {
      console.error("❌ NOAA returned empty data.");
      return null;
    }

    const startDate = new Date(data[0].date);
    const endDate = new Date(data[data.length - 1].date);

    return { startDate, endDate };
  } catch (err) {
    console.error("❌ Error fetching NOAA data:", err.message);
    return null;
  }
}

// Main function to check and run forecast
async function checkAndRunForecast() {
  console.log("⏰ [Cron Job] Checking for new forecast block...");

  const client = new MongoClient(mongoURL);

  try {
    await client.connect();
    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const noaaBlock = await getLatestNOAABlock();
    if (!noaaBlock) return;

    // Calculate the next 27-day block after NOAA's latest end date
    const nextStartDate = new Date(noaaBlock.endDate.getTime() + 24 * 60 * 60 * 1000);
    const nextEndDate = new Date(nextStartDate.getTime() + 26 * 24 * 60 * 60 * 1000);

    // Check if predictions already exist for this block
    const existingBlock = await collection.findOne({
      date: { $gte: nextStartDate, $lte: nextEndDate },
    });

    if (existingBlock) {
      console.log("🕒 Forecast already exists for this block. Skipping.");
      return;
    }

    console.log(`✅ Running LSTM prediction for ${nextStartDate.toDateString()} → ${nextEndDate.toDateString()}`);

    // Run LSTM with next start date
    const predictions = await runLSTMModel(nextStartDate, nextEndDate);

    if (predictions && predictions.length > 0) {
      // Clear old predictions (optional, or you can keep history)
      // await collection.deleteMany({});

      // Insert new predictions
      await collection.insertMany(predictions);

      // Post to API
      await axios.post("http://localhost:5000/api/predictions/lstm", { predictions });

      console.log("✅ Forecast updated in DB and posted to API");
    } else {
      console.log("⚠️ No predictions generated by LSTM model.");
    }

  } catch (err) {
    console.error("❌ Error in cron job:", err.message);
  } finally {
    await client.close();
  }
}

// Schedule cron job every day at 6:00 AM
cron.schedule("0 6 * * *", async () => {
  await checkAndRunForecast();
});

// Run immediately on start (for testing)
checkAndRunForecast();

module.exports = { checkAndRunForecast };
