// backend/cron_forecast_job.js
const cron = require("node-cron");
const axios = require("axios");
const { MongoClient } = require("mongodb");
const { runLSTMModel } = require("./models/LSTMModelRunner");

const mongoURL = "mongodb://localhost:27018/";
const dbName = "noaa_database";
const collectionName = "forecast_lstm_27day";

// NOAA TXT file endpoint
const NOAA_TXT_URL = "https://services.swpc.noaa.gov/text/27-day-outlook.txt";

// Robust date parser
function parseNOAADate(dateStr) {
  const [year, monthStr, day] = dateStr.split(" ");
  const monthIndex = new Date(`${monthStr} 1, 2000`).getMonth();
  return new Date(parseInt(year), monthIndex, parseInt(day));
}

// Fetch and parse NOAA TXT to get last date
async function getLastNOAADate() {
  try {
    const response = await axios.get(NOAA_TXT_URL);
    const data = response.data;

    const lines = data
      .split("\n")
      .filter((line) => /^\d{4} \w{3} \d{2}/.test(line.trim()));
    if (lines.length === 0) {
      console.error("❌ NOAA TXT file contains no valid dates.");
      return null;
    }

    const lastLine = lines[lines.length - 1];
    const dateStr = lastLine.split(/\s+/).slice(0, 3).join(" ");
    const lastDate = parseNOAADate(dateStr);

    console.log("🌍 Last NOAA date found:", lastDate.toDateString());
    return lastDate;
  } catch (err) {
    console.error("❌ Error fetching NOAA TXT:", err.message);
    return null;
  }
}

async function checkAndRunForecast() {
  console.log("⏰ [Cron Job] Checking for new forecast block...");

  const client = new MongoClient(mongoURL);

  try {
    await client.connect();
    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    const lastNOAADate = await getLastNOAADate();
    if (!lastNOAADate) return;

    // Run LSTM model to generate future predictions
    const predictions = await runLSTMModel();

    if (!predictions || predictions.length === 0) {
      console.warn("⚠️ No future predictions generated by LSTM.");
      return;
    }

    // Delete old predictions beyond the latest NOAA date
    await collection.deleteMany({ date: { $gt: lastNOAADate } });

    // Insert new future predictions
    await collection.insertMany(predictions);
    console.log(`✅ Saved ${predictions.length} future forecast entries to MongoDB.`);

    // Optional: post to Express API
    // await axios.post("http://localhost:5000/api/predictions/lstm", { predictions });
    // console.log("✅ Forecast posted to API route");

  } catch (err) {
    console.error("❌ Error in cron job:", err.message);
  } finally {
    await client.close();
  }
}

// Schedule daily at 6:00 AM
cron.schedule("0 6 * * *", async () => {
  await checkAndRunForecast();
});

// Run immediately on start
checkAndRunForecast();

module.exports = { checkAndRunForecast };
